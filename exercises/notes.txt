Runtime complexity ~ big O akateemisesti

O(n) - linear
O(1) - constant
O(n^2) - Quadratic

string looping - linear
two nested loops - same collecion - Quadratic O(n^2) (= n*n)
two nested loop different collections O(n*m)

searching O(log(n))
sorting O(n*log(n))


-- space complexity - ram usage - 


DATA STRUCTURES

optimal runtime complexity for adding or removing

QUEUE 
- FIFO - first in first out
- queue class:
- array jossa pelkästään: array.unshift - array.pop

LINKED LIST

nodeOne.next = nodeTwo


GENERATOR - es2015

ensimmäinen function call = {}
toinen (eli ensimmäinen next) yeldiin asti = {}
kolmas kerta laittaa (toinen next) yeldiin annetun arvon = {}



TREES
Breadth-First traversal
- puun tasot kerrallaan

Depth-First traversal
- puun oksahaara kerrallaan sivusta lähtien




















  for (let character of str) {
// es2015 for loop


  for (let char in )

  // objektille


regex - regular expression
word.replace(/[^\w]/g, "")
